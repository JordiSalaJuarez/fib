#ifndef MINHASH_HH
#define MINHASH_HH

#include <iostream>
#include <tr1/functional>
#include <stdlib.h>
#include <time.h>
#include <string>
#include <vector>
#include <set>
using namespace std;

class MinHash{
private:
  // Vector of vectors representing the MinHash Matrix.
  // The MinHash Matrix is repesented by a group of sets, being each 
  // set repesented by a vector of integers.
  // Each integer of that vector represents a different hash function 
  // value for that set.
  // Thus, rows of the vector are sets, and columns different hash
  // functions.
  vector<vector<unsigned int> > MH;
  // Vector of sets representing the Characteristic Matrix.
  // The Characteristic Matrix is represented in a Sparse Matrix way,
  // and created giving each shingle a row number generated by a hash
  // function. Thus, for each set, contained at the vector, we only save
  // the rows numbers that has a 1 on them.
  vector<set<unsigned int> > CM;
  // Vector of unsigned integers that will be used to cheaply generate
  // hash functions, XORing each unsigned integer of the vector with
  // the result of the hash function computed on CM.
  vector<unsigned int> funcs;
  // Private function that fills CM, and computes the first hash
  // function values(for each set), of MH.
  void fst_hash(const vector<set<string> >& Cjt_Sets);
  // Private function that fills funcs, it generates t-1 random integers,
  // in order to create then t-1 more hash functions.
  void gen_xor_funcs(int seed);
public:
  // Constructor function that receives a group of sets, representing
  // each a document turned to a set of shingles, and an integer
  // telling the number of hash functions desired.
  // A MinHash object is created, and MH is filled.
  MinHash(const vector<set<string> >& Cjt_Sets, int t, int seed);
  // Function that returns the MinHash Matrix.
  vector<vector<unsigned int> > get_MH();
  // Function that returns the Characteristic Matrix.
  vector<set<unsigned int> > get_CM();
  // Function that returns the funcs vector.
  vector<unsigned int> get_funcs();
};

#endif
